---

- hosts: all
  gather_facts: true
  become: yes
  become_method: sudo

  vars:
    docker_group: docker

  handlers:
    - name: "start docker on boot"
      systemd:
        name: docker
        state: started
        enabled: yes

  pre_tasks:
    - name: "FIX: Ubuntu 16.04 LTS"
      raw: apt-get install python-minimal aptitude -y
      when: ( ansible_distribution == "Ubuntu" and ansible_distribution_version == "16.04") or ( ansible_distribution == "Debian" and ansible_distribution_major_version == "9")

  tasks:

    - debug:
       msg: "I am connecting to {{ ansible_host }} which is running {{ ansible_distribution }} {{ ansible_distribution_version }}"

    - name: install docker on debian/ubuntu1604
      include_tasks: "./tasks/docker_debian.yml"
      when: ( ansible_distribution == "Ubuntu" and ansible_distribution_version == "16.04") or ( ansible_distribution == "Debian" and ansible_distribution_major_version == "9")

    - name: install docker on centos7
      include_tasks: "./tasks/docker_centos.yml"
      when: ( ansible_distribution == "CentOS" and ansible_distribution_major_version == "7")

    - name: add docker group and add user to it
      include_tasks: "./tasks/docker_group.yml"

- hosts: db
  become: yes
  become_method: sudo
  vars:
    home: "{{home_path.stdout}}"
  tasks:
    - name: get home path
      become_user: "{{ ansible_user }}"
      shell: "echo $HOME"
      register: home_path

    - name: change hostname to db
      hostname:
        name: "db"

    - name: add myself to /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: '^127\.0\.0\.1[ \t]+localhost'
        line: '127.0.0.1 localhost db'
        state: present

    - name: create cassandra volumes folder
      file:
        path: "{{home}}/cassandra_volumes"
        state: directory

- hosts: manager
  become: yes
  become_method: sudo
  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: create swarm_manager_operational_group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_batch }}"
      when: "'active' in swarm_status.stdout_lines"
      run_once: true

    - name: create swarm_manager_bootstrap_group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_bootstrap
      with_items: "{{ ansible_play_batch }}"
      when: "'active' not in swarm_status.stdout_lines"
      run_once: true

- hosts: worker
  become: yes
  become_method: sudo
  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: create swarm_worker_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_operational
      with_items: "{{ ansible_play_batch }}"
      when: "'active' in swarm_status.stdout_lines"
      run_once: true

    - name: create swarm_worker_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_bootstrap
      with_items: "{{ ansible_play_batch }}"
      when: "'active' not in swarm_status.stdout_lines"
      run_once: true


- hosts: swarm_manager_bootstrap[0]
  become: true
  tasks:
    - name: initialize swarm cluster
      shell: >
        docker swarm init
        --advertise-addr={{ ansible_host }}:2377
      when: "'swarm_manager_operational' not in groups"
      register: bootstrap_first_node

    - name: add initialized host to swarm_manager_operational group
      add_host:
        hostname: "{{ ansible_play_batch[0] }}"
        groups: swarm_manager_operational
      when: bootstrap_first_node is changed
    
- hosts: swarm_manager_operational[0]
  become: true
  tasks:
    - name: retrieve swarm manager token
      shell: docker swarm join-token -q manager
      register: swarm_manager_token

    - name: retrieve swarm worker token
      shell: docker swarm join-token -q worker
      register: swarm_worker_token

    - name: populate list of manager ips
      add_host:
        hostname: "{{ ansible_host }}"
        groups: swarm_manager_ips
      with_items: "{{ ansible_play_batch }}"

#   - name: Show Worker Token
#     debug: var=swarm_worker_token.stdout

- hosts: swarm_manager_bootstrap:!swarm_manager_operational
  become: true
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_manager_token']['stdout'] }}"
  tasks:
    - name: join manager nodes to cluster
      shell: >
        docker swarm join
        --advertise-addr={{ ansible_host }}:2377
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377

- hosts: swarm_worker_bootstrap
  become: true
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_worker_token']['stdout'] }}"
  tasks:
    - name: join worker nodes to cluster
      shell: >
        docker swarm join
        --advertise-addr={{ ansible_host }}:2377
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377

- hosts: manager
  become: yes
  become_method: sudo
  vars:
    home: "{{home_path.stdout}}"
  tasks:
    - name: get home path
      become_user: "{{ ansible_user }}"
      shell: "echo $HOME"
      register: home_path

    # - name: get the column number for hostname
    #   shell: >
    #     docker node ls | awk -F'[[:space:]]*' '{ for (i=1; i<=NF; ++i) if ($i == "HOSTNAME") print i }'
    #   register: hostname_column

      #CHANGED temporary comment from line 194 -> 300 (line after, path: "{{home}}/thingsboard")
    - name: download docker-compose
      get_url:
        url: https://github.com/docker/compose/releases/download/1.22.0/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: 0755
    #   #when: ansible_nodename == "192-168-22-10-nip-io"
    - name: Create an overlay network
      shell: >
        docker network ls | grep appnet || docker network create --driver overlay appnet
    #register: network_overlay_status


    - name: show home
      debug: var=home_path.stdout

    - name: Create nginx folder
      file:
        path: "{{home}}/nginx"
        state: directory

    - name: Create site folder
      file:
        path: "{{home}}/nginx/letsencryptsite"
        state: directory

    - name: copy nginx-stack file
      template:
        src: "./nginx-certificate/nginx-stack.yml.j2"
        dest: "{{home}}/nginx/nginx-stack.yml"

    - name: copy nginx config file
      template:
        src: "./nginx-certificate/nginxgetcertificat.conf.j2"
        dest: "{{home}}/nginx/nginxgetcertificat.conf"

    - name:  copy index.html file
      template:
        src: "./nginx-certificate/index.html.j2"
        dest: "{{home}}/nginx/letsencryptsite/index.html"

    - name: Create nginx docker stack
      shell: >
        docker stack deploy -c "{{home}}/nginx"/nginx-stack.yml nginx

    #copy cassandra file and run cassandra stack
    - name: create cassandra folder
      file:
        path: "{{home}}/cassandra"
        state: directory



    - name: copy cassandra config file
      template:
        src: "./cassandra-config/cassandra-compose.yml.j2"
        dest: "{{home}}/cassandra/cassandra-compose.yml"

    - name: run cassandra stack
      shell: >
        docker stack deploy -c "{{home}}/cassandra/cassandra-compose.yml" cassandra
    # copy thingsboard file and run thingsboard stack
    - name: create thingsboard folder
      file:
        path: "{{home}}/thingsboard"
        state: directory

    - name: copy thingsboard config file
      template:
        src: "./thingsboard-config/docker-compose.yml.j2"
        dest: "{{home}}/thingsboard/docker-compose.yml"

    - name: copy thingsboard tb file
      template:
        src: "./thingsboard-config/tb.env.j2"
        dest: "{{home}}/thingsboard/tb.env"

    - name: create thingsboard stack
      shell: >
        docker stack deploy -c "{{home}}/thingsboard/docker-compose.yml" thingsboard

    - name: wait 5 minutes until thingsboard stack finish to install the DB
      pause:
        minutes: 5

    - name: check if thingsboard finished
      shell: >
        docker exec "$(docker ps -q -f label=com.docker.swarm.service.name=thingsboard_tb)" timeout 5s curl -fIsS http://localhost:8080 > /dev/null
      retries: 20
      delay: 2
      register: result
      until: result.rc == 0

    - name: remove thingsboard stack
      shell: >
        docker stack rm thingsboard

    - name: delete thingsboard config file
      file:
        state: absent
        path: "{{home}}/thingsboard/docker-compose.yml"

    - name: copy thingsboard mode global config file
      template:
        src: "./thingsboard-config/docker-production.yml.j2"
        dest: "{{home}}/thingsboard/docker-production.yml"

    - name: create thingsboard production stack
      shell: >
        docker stack deploy -c "{{home}}/thingsboard/docker-production.yml" thingsboard

    - name: Generate ssl certificate for the website domain
      shell: >
        docker run -it --rm
        -v "{{home}}"/nginxcertificate/etc/letsencrypt:/etc/letsencrypt
        -v "{{home}}"/nginxcertificate/var/lib/letsencrypt:/var/lib/letsencrypt
        -v "{{home}}"/nginx/letsencryptsite:/data/letsencrypt
        -v "{{home}}"/nginxcertificate/var/log/letsencrypt:/var/log/letsencrypt
        certbot/certbot
        certonly --webroot
        --register-unsafely-without-email --agree-tos \
        --webroot-path=/data/letsencrypt \
        --staging \
        -d {{ website_domain }}

      register: certificat_result
      ignore_errors: yes

    - name: Generate ssl certificate for the monitor domain
      shell: >
        docker run -it --rm
        -v "{{home}}"/nginxcertificate/etc/letsencrypt:/etc/letsencrypt
        -v "{{home}}"/nginxcertificate/var/lib/letsencrypt:/var/lib/letsencrypt
        -v "{{home}}"/nginx/letsencryptsite:/data/letsencrypt
        -v "{{home}}"/nginxcertificate/var/log/letsencrypt:/var/log/letsencrypt
        certbot/certbot
        certonly --webroot
        --register-unsafely-without-email --agree-tos \
        --webroot-path=/data/letsencrypt \
        --staging \
        -d {{ monitor_domain }}

    - name: Generate ssl certificate for the log domain
      shell: >
        docker run -it --rm
        -v "{{home}}"/nginxcertificate/etc/letsencrypt:/etc/letsencrypt
        -v "{{home}}"/nginxcertificate/var/lib/letsencrypt:/var/lib/letsencrypt
        -v "{{home}}"/nginx/letsencryptsite:/data/letsencrypt
        -v "{{home}}"/nginxcertificate/var/log/letsencrypt:/var/log/letsencrypt
        certbot/certbot
        certonly --webroot
        --register-unsafely-without-email --agree-tos \
        --webroot-path=/data/letsencrypt \
        --staging \
        -d {{ log_domain }}

      #if we want to generate production certificate we must change the above block like this
      # docker run -it --rm
      # -v "{{home}}"/nginxcertificate/etc/letsencrypt:/etc/letsencrypt
      # -v "{{home}}"/nginxcertificate/var/lib/letsencrypt:/var/lib/letsencrypt
      # -v "{{home}}"/nginx/letsencryptsite:/data/letsencrypt
      # -v "{{home}}"/nginxcertificate/var/log/letsencrypt:/var/log/letsencrypt
      # certbot/certbot
      # certonly --webroot
      #--email {{ email_for_certificat }} --agree-tos --no-eff-email \
      # --webroot-path=/data/letsencrypt \
      # -d {{ monitor_domain }}

      register: certificat_result
      ignore_errors: yes

    - name: Remove nginx docker stack
      shell: >
        docker stack rm nginx

    - name: create dh-param directory
      file:
        path: "{{home}}/dh-param"
        state: directory

    - name: generate dh param file
      shell: >
        openssl dhparam -out {{home}}/dh-param/dhparam-2048.pem 2048

    - name: create nginx-production folder
      file:
        path: "{{home}}/nginx-production/site"
        state: directory

    - name: copy index file
      template:
        src: "./nginx-certificate/index.html.j2"
        dest: "{{home}}/nginx-production/site/index.html"

    - name: copy nginx configuration file
      template:
        src: "./nginx-production/production.conf.j2"
        dest: "{{home}}/nginx-production/production.conf"

    - name: copy nginx-stack file
      template:
        src: "./nginx-production/production-stack.yml.j2"
        dest: "{{home}}/nginx-production/production-stack.yml"



    - name: run sts exporter service
      shell: >
        docker service create --name sts-exporter --network appnet --mode global --constraint 'node.role == manager' --publish 9913:9913 --env NGIX_HOST="http://nginx_nginx-proxy/status/format/json" --env METRICS_NS="nginx" marrotte/nginx-sts-exporter

    - name: copy swarmprom archive file
      copy:
        src: "./swarmprom-nginx/swarmprom-nginx.tar.gz"
        dest: "{{home}}/swarmprom-nginx.tar.gz"

    - name: extract swarmprom archive
      unarchive:
        src: "{{home}}/swarmprom-nginx.tar.gz"
        dest: "{{home}}"
        remote_src: yes

    - name: run swarmprom stack
      shell: >
        ADMIN_USER=admin ADMIN_PASSWORD=admin SLACK_URL=https://hooks.slack.com/services/TOKEN SLACK_CHANNEL=devops-alerts SLACK_USER=alertmanager docker stack deploy -c {{home}}/swarmprom/docker-compose.yml mon

    - name: wait 2 minutes until swarmprom launch
      pause:
        minutes: 2

    - name: copy elk archive file
      copy:
        src: "./elk-production/docker-elk.tar.gz"
        dest: "{{home}}/docker-elk.tar.gz"

    - name: extract elk archive
      unarchive:
        src: "{{home}}/docker-elk.tar.gz"
        dest: "{{home}}"
        remote_src: yes

    - name: build image for elk
      shell: >
        cd {{home}}/docker-elk && docker-compose build


    - name: run elk stack
      shell: >
        docker stack deploy -c {{home}}/docker-elk/docker-stack.yml elk

    - name: wait until elk stack finish to launch
      pause:
        minutes: 3

    - name: elasticsearch init
      shell: >
        docker exec "$(docker ps -q -f label=com.docker.swarm.service.name=elk_elasticsearch)" bin/init_sg.sh

    - name: wait until initialization finish
      pause:
        minutes: 1

    - name: launch logspout
      shell: >
        docker service create --name logspout --network appnet --mode global --mount "type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock" -e ROUTE_URIS='logstash+tcp://elk_logstash:5000' bekt/logspout-logstash

    - name: Create nginx production docker stack
      shell: >
        docker stack deploy -c "{{home}}/nginx-production"/production-stack.yml nginx

    - name: wait 1 minutes until nginx production launch
      pause:
        minutes: 1

    - name: add nginx dashboard
      shell: >
        curl --user admin:admin 'http://{{ansible_host}}:3000/api/dashboards/db' -X POST -H 'Content-Type:application/json;charset=UTF-8' --data-binary @{{home}}/swarmprom/swarmprom_nginx.json

    - name: add cron job for certificate renewal
      cron:
        minute: "00"
        hour: "23"
        job: docker run --rm -it --name certbot -v "{{home}}/nginxcertificate/etc/letsencrypt:/etc/letsencrypt" -v "{{home}}/nginxcertificate/var/lib/letsencrypt:/var/lib/letsencrypt" -v "{{home}}/nginx-production/site:/data/letsencrypt" -v "{{home}}/nginxcertificate/var/log/letsencrypt:/var/log/letsencrypt" certbot/certbot renew --webroot -w /data/letsencrypt --quiet && docker kill --signal=HUP "$(docker ps -q -f label=com.docker.swarm.service.name=nginx_nginx-proxy)"
