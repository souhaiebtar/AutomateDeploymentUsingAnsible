---

- hosts: all
  gather_facts: true
  become: yes
  become_method: sudo

  vars:
    docker_group: docker

  handlers:
    - name: "start docker on boot"
      systemd:
        name: docker
        state: started
        enabled: yes

  tasks:
    - debug:
       msg: "I am connecting to {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }} which is running {{ ansible_distribution }} {{ ansible_distribution_version }}"

    - name: Add Docker GPG key
      apt_key: url=https://download.docker.com/linux/ubuntu/gpg

    - name: Add Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} stable

    - name: Install list of packages
      # apt:
      #   name: "{{ item }}"
      #   state: present
      #   update_cache: yes
      # with_items:
      #   - apt-transport-https
      #   - ca-certificates
      #   - curl
      #   - software-properties-common
      #   - docker-ce
      # can be replaced by
      apt:
        name: ['apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'docker-ce']
        state: present
        update_cache: yes

    - name: Create "docker" group
      group:
        name: "{{ docker_group }}"
        state: present

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        group: "{{ docker_group }}"
        append: yes
      notify: "start docker on boot"


- hosts: manager
  become: yes
  become_method: sudo
  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: create swarm_manager_operational_group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_batch }}"
      when: "'active' in swarm_status.stdout_lines"
      run_once: true

    - name: create swarm_manager_bootstrap_group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_bootstrap
      with_items: "{{ ansible_play_batch }}"
      when: "'active' not in swarm_status.stdout_lines"
      run_once: true

- hosts: worker
  become: yes
  become_method: sudo
  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: create swarm_worker_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_operational
      with_items: "{{ ansible_play_batch }}"
      when: "'active' in swarm_status.stdout_lines"
      run_once: true

    - name: create swarm_worker_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_bootstrap
      with_items: "{{ ansible_play_batch }}"
      when: "'active' not in swarm_status.stdout_lines"
      run_once: true


- hosts: swarm_manager_bootstrap[0]
  become: true
  tasks:
    - name: initialize swarm cluster
      shell: >
        docker swarm init
        --advertise-addr={{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:2377
      when: "'swarm_manager_operational' not in groups"
      register: bootstrap_first_node

    - name: add initialized host to swarm_manager_operational group
      add_host:
        hostname: "{{ ansible_play_batch[0] }}"
        groups: swarm_manager_operational
      when: bootstrap_first_node is changed
    #- name: init swarm cluster
    #  command: docker swarm init --advertise-addr '192.168.22.10'
    #  #when: ansible_nodename == "192-168-22-10-nip-io"

- hosts: swarm_manager_operational[0]
  become: true
  tasks:
    - name: retrieve swarm manager token
      shell: docker swarm join-token -q manager
      register: swarm_manager_token

    - name: retrieve swarm worker token
      shell: docker swarm join-token -q worker
      register: swarm_worker_token

    - name: populate list of manager ips
      add_host:
        hostname: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        groups: swarm_manager_ips
      with_items: "{{ ansible_play_batch }}"

#   - name: Show Worker Token
#     debug: var=swarm_worker_token.stdout

- hosts: swarm_manager_bootstrap:!swarm_manager_operational
  become: true
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_manager_token']['stdout'] }}"
  tasks:
    - name: join manager nodes to cluster
      shell: >
        docker swarm join
        --advertise-addr={{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:2377
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377

- hosts: swarm_worker_bootstrap
  become: true
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_worker_token']['stdout'] }}"
  tasks:
    - name: join worker nodes to cluster
      shell: >
        docker swarm join
        --advertise-addr={{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:2377
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377

- hosts: manager
  become: yes
  become_method: sudo
  vars:
    home: "{{home_path.stdout}}"
  tasks:
    - name: get home path
      become_user: "{{ ansible_user }}"
      shell: "echo $HOME"
      register: home_path
    - name: download docker-compose
      get_url:
        url: https://github.com/docker/compose/releases/download/1.22.0/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: 0755
      #when: ansible_nodename == "192-168-22-10-nip-io"
    - name: Create an overlay network
      shell: >
        docker network ls | grep appnet || docker network create --driver overlay appnet
    #register: network_overlay_status

    #- name: create nginx directory
    #  shell: >
    #    mkdir $HOME/nginx

    #- name: create nginx directory
    #  file: path=/home/vagrant/nginx12 state=directory
    - name: show home
      debug: var=home_path.stdout

    - name: Create nginx folder
      file:
        path: "{{home}}/nginx"
        state: directory

    - name: Create site folder
      file:
        path: "{{home}}/nginx/letsencryptsite"
        state: directory

    - name: copy nginx-stack file
      template:
        src: "./nginx-certificate/nginx-stack.yml.j2"
        dest: "{{home}}/nginx/nginx-stack.yml"

    - name: copy nginx config file
      template:
        src: "./nginx-certificate/nginxgetcertificat.conf.j2"
        dest: "{{home}}/nginx/nginxgetcertificat.conf"

    - name:  copy index.html file
      template:
        src: "./nginx-certificate/index.html.j2"
        dest: "{{home}}/nginx/letsencryptsite/index.html"

    - name: Create nginx docker stack
      shell: >
        docker stack deploy -c "{{home}}/nginx"/nginx-stack.yml nginx



    - name: Generate ssl certificate for the domain
      shell: >
        docker run -it --rm
        -v "{{home}}"/nginxcertificate/etc/letsencrypt:/etc/letsencrypt
        -v "{{home}}"/nginxcertificate/var/lib/letsencrypt:/var/lib/letsencrypt
        -v "{{home}}"/nginx/letsencryptsite:/data/letsencrypt
        -v "{{home}}"/nginxcertificate/var/log/letsencrypt:/var/log/letsencrypt
        certbot/certbot
        certonly --webroot
        --register-unsafely-without-email --agree-tos
        --webroot-path=/data/letsencrypt
        --staging
        -d {{ website_domain }}
      register: certificat_result
      ignore_errors: yes

    - name: Remove nginx docker stack
      shell: >
        docker stack rm nginx
